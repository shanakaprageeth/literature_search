Metadata-Version: 2.1
Name: research-search-shanaka
Version: 0.0.1
Summary: This package search for literature on multiple databases and allow uses to filter them using PRISMA method
Author-email: Shanaka Prageeth <wasp.bites.jp@gmail.com>
License: GPL-3.0-only
Project-URL: Homepage, https://github.com/shanakaprageeth/prisma_search
Project-URL: Issues, https://github.com/shanakaprageeth/prisma_search/issues
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# PRISMA Search Literature Review Tool

## Overview
This project helps automate and document literature reviews using the PRISMA methodology. It allows users to input a research topic or keywords, manages PRISMA data, and outputs publication lists and methodology text for research papers.

## Features
- **Flexible keyword input**: Accept keywords as a list or comma-separated string in the configuration file
- **Smart keyword handling**: Automatically derives keywords from research topic if not provided, with warning message
- **Enhanced output**: Creates multiple CSV files showing all publications found and selected publications at each stage
- Collects initial PRISMA-related values (e.g., inclusion/exclusion criteria, databases, date ranges)
- Outputs:
  - PRISMA method data for literature review methods section
  - Multiple CSV files:
    - `all_publications_found.csv`: All publications with inclusion status and reasons
    - `selected_publications.csv`: Only included publications
    - `output_results.csv`: All publications with inclusion status (backward compatibility)
  - JSON file with complete results
  - PRISMA flow diagram in draw.io format
- Supports multiple databases: PubMed, CrossRef, arXiv, CORE, SemanticScholar
- Validates configuration files for correctness
- Retries API requests with exponential backoff for reliability
- Modular design for extensibility

## Configuration

### Keywords Configuration
You can provide keywords in your configuration file in two ways:

1. **As a list** (original format):
```json
{
  "keywords": ["machine learning", "deep learning", "neural networks"]
}
```

2. **As a comma-separated string** (new format):
```json
{
  "keywords": "machine learning, deep learning, neural networks"
}
```

If no keywords are provided, the tool will automatically generate them from the `research_topic` and display a warning message.

### Sample Configuration
```json
{
  "research_topic": "fundus image dataset",
  "keywords": "medical-imaging, machine-learning, fundus, retinal, ophthalmology",
  "initial_prisma_values": {
    "inclusion_criteria": ["review", "thesis", "journal", "book"],
    "exclusion_criteria": ["non-english", "conference"],
    "databases": ["PubMed", "CrossRef", "arXiv", "CORE", "SemanticScholar"],
    "date_range": "2015-2025"
  }
}
```

## Installation
To install the `research_search_shanaka` pip package, run:

```bash
pip install dist/research_search_shanaka-*.whl
```

## Usage

### Command Line Interface
```bash
python prisma_review.py --config sample_input.json --logic OR --page_size 100 --output_dir output
```

### Programmatic Usage
1. Import the package in your Python script:

```python
from research_search_shanaka.config_loader import load_config
from research_search_shanaka.keywords import get_keywords
from research_search_shanaka.api_clients import (
    get_publications_europe_pmc,
    get_publications_crossref,
    get_publications_arxiv,
    get_publications_core,
    get_publications_semanticscholar
)
from research_search_shanaka.prisma_logs import output_prisma_results, create_prisma_drawio_diagram
```

2. Use the provided functions to load configurations, fetch publications, and generate PRISMA outputs.

3. Example:

```python
config = load_config('sample_input.json')
keywords = get_keywords(config.get('research_topic', ''))
publications = get_publications_europe_pmc(keywords)
output_prisma_results(publications, criteria_counts, total_records, output_dir='output')
create_prisma_drawio_diagram(criteria_counts, total_records, output_dir='output')
```

## Output Files
The tool creates the following output files in the specified output directory:
- `all_publications_found.csv`: All publications with inclusion status and exclusion reasons
- `selected_publications.csv`: Only the publications that meet inclusion criteria
- `output_results.csv`: All publications with inclusion status (for backward compatibility)
- `results.json`: Complete results in JSON format including criteria counts
- `prisma_flow_diagram.drawio`: PRISMA flow diagram for your research

## Requirements
- Ubuntu 24.04.2 LTS (dev container)
- Python 3.10+ (or as specified in implementation)
- Required Python packages (installed via `pip`):
  - `requests`
  - `drawpyo`
  - `matplotlib`
  - `pytest` (for testing)

## Contributing
See `.github/copilot-instructions.md` for coding standards.

## License
GPL-3
